[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --no-key-bindings --no-update-rc'

[[plugins]]
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'kana/vim-submode'

# operator {{{
[[plugins]]
repo = 'kana/vim-operator-user'
lazy = 1

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = '<Plug>(operator-surround-'
# }}}

# textobj {{{
[[plugins]]
repo = 'kana/vim-textobj-user'
lazy = 1

[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'
on_map = [['xo', 'ie'], ['xo', 'ae']]

[[plugins]]
repo = 'kana/vim-textobj-fold'
depends = 'vim-textobj-user'
on_map = [['xo', 'iz'], ['xo', 'az']]

[[plugins]]
repo = 'kana/vim-textobj-function'
depends = 'vim-textobj-user'
on_map = [['xo', 'if'], ['xo', 'af'], ['xo', 'iF'], ['xo', 'aF']]

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'
on_map = [['xo', 'ii'], ['xo', 'ai']]

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'
on_map = [['xo', 'il'], ['xo', 'al']]
# }}}

# Filetype {{{
[[plugins]]
repo = 'eagletmt/ghcmod-vim'
on_ft = 'haskell'

[[plugins]]
repo = 'eagletmt/neco-ghc'
on_ft = 'haskell'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]]
repo = 'itchyny/vim-haskell-indent'
on_ft = 'haskell'

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]]
repo = 'rhysd/vim-clang-format'
depends = 'vim-operator-user'
on_map = '<Plug>(operator-clang-format)'

[[plugins]]
repo = 'rhysd/vim-crystal'
on_ft = 'crystal'

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'

[[plugins]]
repo = 'vim-jp/vim-cpp'
on_ft = 'cpp'

# Colorscheme {{{
[[plugins]]
repo = 'cocopon/iceberg.vim'
# }}}

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1
hook_post_source = 'call config#lexima()'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = ['<Plug>(EasyAlign)', '<Plug>(LiveEasyAlign)']

[[plugins]]
repo = 'kana/vim-altr'
on_map = '<Plug>(altr-'

[[plugins]]
repo = 'rhysd/devdocs.vim'
on_map = '<Plug>(devdocs-under-cursor)'

[[plugins]]
repo = 'w0rp/ale'

[[plugins]]
repo = 'SirVer/ultisnips'
on_path = '.*'

[[plugins]]
repo = 'tyru/caw.vim'
on_map = '<Plug>(caw:'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
'''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
let g:lsp_diagnostics_enabled = 0
let g:lsp_async_completion = 1
if executable('clangd')
    augroup LspClangd
    au!
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd']},
        \ 'whitelist': ['c', 'cpp'],
        \ })
    autocmd FileType c,cpp setlocal omnifunc=lsp#complete
    augroup END
endif

if executable('rls')
    augroup LspRls
    au!
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'rls',
        \ 'cmd': {server_info->['rustup', 'run', 'stable', 'rls']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'Cargo.toml'))},
        \ 'whitelist': ['rust'],
        \ })
    autocmd FileType rust setlocal omnifunc=lsp#complete
    augroup END
endif

if executable('gopls')
    augroup LspGo
    au!
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
        \ 'whitelist': ['go'],
        \ })
    autocmd FileType go setlocal omnifunc=lsp#complete
    augroup END
endif
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-ultisnips.vim'
hook_add = '''
    call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
        \ 'name': 'ultisnips',
        \ 'whitelist': ['*'],
        \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
        \ }))
'''
